$global-border-box: true;
$base-font-size: 16px !default;
$base-line-height: 24px !default;
$brand-round: 4px !default;
$responsive: true;
$lap-start: 481px;
$desk-start: 940px;
$giga-size: 96px !default;
$mega-size: 72px !default;
$kilo-size: 48px !default;
$h1-size: 36px !default;
$h2-size: 30px !default;
$h3-size: 24px !default;
$h4-size: 20px !default;
$h5-size: 16px !default;
$h6-size: 14px !default;
$milli-size: 12px !default;
$micro-size: 10px !default;
$brand-color: #cc8211 !default;
$brand-color-2: #2a3c50 !default;
$brand-color-3: #c1ab7a !default;
$brand-face: "Lucida Grande", Arial, Helvetica, sans-serif !default;
$base-spacing-unit: $base-line-height !default;
$half-spacing-unit: $base-spacing-unit / 2 !default;
$line-height-ratio: $base-line-height / $base-font-size;

/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
@mixin cf {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 *
   `@include font-size(10px);`
 *
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size, $line-height: true) {
  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;
  @if $line-height == true {
    line-height: ceil($font-size / $base-line-height) *
      ($base-line-height / $font-size);
  }
}

/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
@mixin vendor($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * lap-and-up
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
$palm-end: $lap-start - 1px;
$lap-end: $desk-start - 1px;

@mixin media-query($media-query) {
  @if $media-query == palm {
    @media only screen and (max-width: $palm-end) {
      @content;
    }
  }

  @if $media-query == lap {
    @media only screen and (min-width: $lap-start) and (max-width: $lap-end) {
      @content;
    }
  }

  @if $media-query == lap-and-up {
    @media only screen and (min-width: $lap-start) {
      @content;
    }
  }

  @if $media-query == portable {
    @media only screen and (max-width: $lap-end) {
      @content;
    }
  }

  @if $media-query == desk {
    @media only screen and (min-width: $desk-start) {
      @content;
    }
  }

  @if $media-query == desk-wide {
    @media only screen and (min-width: $desk-wide-start) {
      @content;
    }
  }
}
